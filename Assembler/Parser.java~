import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
public class Parser implements IParser{
  
  private  Scanner fileReader;
  private String currentLine;
  
  
  public Parser(File asmFile) throws FileNotFoundException{
    fileReader = new Scanner(asmFile);
    this.advance();
  }
  
  public Parser(String asmFile)throws FileNotFoundException{
    File f = new File(asmFile);
    fileReader = new Scanner(f);
    this.advance();
  }
  
  public boolean hasMoreCommands(){
    return fileReader.hasNextLine();
  }
  
  public void advance(){
    if (hasMoreCommands()){
      currentLine = fileReader.nextLine();
      currentLine = currentLine.replaceAll("\\s*",""); //this will clear all spaces
    }
  }
  
  public CommandType commandType(){
    //check for A Command
    if(currentLine.startsWith("@") && 
       currentLine.lastIndexOf("@") == 0){
      return CommandType.A_COMMAND;
    }
    //Check for C Command
    //TO DO: Revisit when dest and comp hash maps are implemented
    String tokens[] = currentLine.split("=");
    if (tokens.length == 2){
      return CommandType.C_COMMAND;
    }
    tokens = currentLine.split(";");
    if (tokens.length == 2){
      return CommandType.C_COMMAND;
    }
    //Check for L command
    if(currentLine.startsWith("(") &&
       currentLine.endsWith(")") &&
       !currentLine.substring(1, currentLine.length()-1).contains("(") &&
       !currentLine.substring(1, currentLine.length()-1).contains(")")){
      return CommandType.L_COMMAND; 
    }
    //Check for Comments
    if (currentLine.startsWith("//")){
      return CommandType.COMMENT;
    }
    return CommandType.UNKNOWN;
    
  }
  
  
  public String symbol(){
    if(commandType() == Commands.C_COMMAND || commandType == Commands.L_COMMAND ){
    
    }
  }
  
  public String dest(){
    return "";
  }
  
  public String comp(){
    return "";
  }
  
  public String jump(){
    return "";
  } 
}